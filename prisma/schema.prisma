generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  fullName      String
  group         String?
  role          Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  teacherModules Module[] @relation("TeacherModules") // Викладач предметів
  studentModules Module[] @relation("StudentModules") // Студент у предметах
  controls       Control[] @relation("UserControls")  // Контролі, створені викладачем
  grades         Grade[]  // Оцінки, пов'язані зі студентом
}

enum Role {
  STUDENT
  TEACHER
}

model Module {
  id          String      @id @default(uuid())
  year        String      // Наприклад, 2024-2025
  semester    String      // 1 семестр чи 2 семестр
  name        String      // Назва предмету (Правознавство і т.д.)
  speakerInfo String?     // Інформація факультету (КАМГЗ3 ФЛ)
  groups      String[]    // Групи, в яких викладається предмет

  teacherId   String
  teacher     User        @relation("TeacherModules", fields: [teacherId], references: [id]) // Викладач
  students    User[]      @relation("StudentModules") // Студенти

  controls    Control[]
}

model Control {
  id          String      @id @default(uuid())
  type        String      // Тип: Тест, Лабораторна і т.д.
  date        DateTime    // Дата проведення
  notes       String?     // Примітки

  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id])

  teacherId   String
  teacher     User        @relation("UserControls", fields: [teacherId], references: [id]) // Викладач

  grades      Grade[]
}

model Grade {
  id          String      @id @default(uuid())
  studentId   String
  student     User        @relation(fields: [studentId], references: [id]) // Студент

  controlId   String
  control     Control     @relation(fields: [controlId], references: [id]) // Контроль

  value       Float?      // Оцінка студента
  notes       String?     // Примітки
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}